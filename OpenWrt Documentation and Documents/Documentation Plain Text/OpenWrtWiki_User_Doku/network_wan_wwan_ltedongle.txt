====== How To use LTE modem in QMI mode for WAN connection ======

Some new 3G/4G dongles use **qmi** and **mbim** protocol to establish connection to ISP.
For your information, [[https://blogs.gnome.org/dcbw/2010/04/15/mobile-broadband-and-qualcomm-proprietary-protocols/|qmi protocol]] is proprietary protocol by Qualcomm. In contrast to qmi, [[http://compliance.usb.org/mbim/|mbim]] is more standardized protocol for 3G/4G dongles.

This recipe explains how to setup and configure OpenWrt for using a USB LTE/3g/UMTS-modem for WAN connection, using QMI interface.
You may want to checkout the [[docs:guide-user:network:wan:multiwan:multiwan_package|Multiwan]] package to use this simultaneously with other connections to the internet.

:!: All recent information is valid for Barrier Breaker release and later. Not tested on AA or elder.

===== About =====
Many modern USB dongles could perform in different ways. If your modem provides only AT command interface - please refer to [[docs:guide-user:network:wan:wwan:3gdongle|How to use 3g/UMTS USB Dongle for WAN connection]]. For more information about different protocols used:
  * **ncm**, see [[docs:guide-user:network:wan:wwan:ethernetoverusb_ncm|How To use LTE modem in NCM mode for WAN connection]]
  * **rndis**, see [[docs:guide-user:network:wan:wwan:ethernetoverusb_rndis|How To use LTE modem in RNDIS mode for WAN connection]]

If it is possible to switch your modem to provide NDIS interface - then this article if for **YOU**.

FIXME Add Speed and Performance test results on **Modem mode** and **QMI mode**.

:!: 8-) Subjective, solution based on NDIS (QMI mode) works much stable. Faster reconnect. Easy to control and monitor.

==== Modem Preparation ====
You need to switch modem to provide native **NDIS** interface instead of **Modem** interface.

:!: Please read about [[docs:guide-user:network:wan:wwan:at_commands|AT commands]] for your modem.

Once you've done - you can disconnect modem from the PC and connect it to the router.

==== Router Preparation ====
1. Install OpenWrt

2. Complete Steps [[docs:guide-quick-start:checks_and_troubleshooting|OpenWrt Configuration]]

Router should be turned on and connected to the Internet to get the needed packages. Please refer to: [[docs:guide-user:network:wan:internet.connection|Internet Connection]].

==== Required Packages ====
To make use of qmi protocol, package **kmod-usb-net-qmi-wwan** and **uqmi** are needed. **uqmi** is available on both **barrier breaker** and **bleeding edge** repository.

  ***''usb-modeswitch''**    - __It will automatically issue a "special" command to the modem for switching it into the "Working" state__
  ***''kmod-mii''**          - __Mii driver__
  ***''kmod-usb-net''**      - __USB to Ethernet__
  ***''kmod-usb-wdm''**
  ***''kmod-usb-net-qmi-wwan''**
  ***''uqmi''**              - __Control utility__


==== Optional Packages ====
1. Add support for MBIM devices
  ***''kmod-usb-net-cdc-mbim''** Kernel module for MBIM Devices
  ***''umbim''**                 MBIM modem utility
<code>
opkg update
opkg install kmod-usb-net-cdc-mbim umbim
</code>

2. Add support for PC Interface (ttyUSB0) - You need it if you want to send AT commands, for eg. to check your balance by USSD.
  ***''kmod-usb-serial-option''**
  ***''kmod-usb-serial''**
  ***''kmod-usb-serial-wwan''**
<code>
opkg update
opkg install kmod-usb-serial-option kmod-usb-serial kmod-usb-serial-wwan
</code>

3. Add support for FlashCard of your dongle - refer to: [[docs:guide-user:storage:usb-drives|USB Storage]]

===== Installation =====
1. Install all the needed packages
<code>
opkg update
opkg install usb-modeswitch kmod-mii kmod-usb-net kmod-usb-wdm kmod-usb-net-qmi-wwan uqmi
</code>

:!: If your have not enough space on your device - think of installing [[docs:guide-user:additional-software:extroot_configuration|Rootfs on External Storage (extroot)]]

:!: Another option is Hardware memory upgrade. Refer to your router Forum thread for possibility and instructions.

2. Reboot the router
<code>
reboot
</code>

3. Check that everything is OK and You got new device:
<code>
ls -l /dev/cdc-wdm0

crw-r--r--    1 root     root      180, 176 Oct  1 12:03 /dev/cdc-wdm0
</code>

If you have no such device - try to find out what went wrong:

try **dmesg** to read kernel logs on USB init
<code>
dmesg
</code>
or look info about USB devices and interfaces present in the system:
<code>
cat /sys/kernel/debug/usb/devices

T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=480  MxCh= 0
D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
P:  Vendor=12d1 ProdID=1506 Rev= 0.00
S:  Manufacturer=Huawei Technologies
S:  Product=HUAWEI Mobile
C:* #Ifs= 3 Cfg#= 1 Atr=c0 MxPwr=500mA
I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=01 Prot=02 Driver=option
E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
I:* If#= 1 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=01 Prot=09 Driver=qmi_wwan
E:  Ad=82(I) Atr=03(Int.) MxPS=  64 Ivl=2ms
I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=01 Prot=08 Driver=qmi_wwan
E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=4ms
</code>

See Troubleshooting Section of this page for more information.

===== Configuration =====
==== With LuCi web interface ====
Install the package **luci-proto-qmi** using Luci (//System -> Software//) and configure the modem using LuCi (//Network -> Interfaces//).

==== QMI Protocol Configuration ====
You can configure UCI manually using [[docs:techref:uci|uci command line]] or [[docs:guide-user:base-system:user.beginner.cli#editing.files| text editor]].\\
[[docs:guide-user:base-system:uci|UCI]] is supporting **qmi** network protocol configuration.

:!: The package uqmi must be installed to use QMI protocol.

^Name 	^Type 	^Required 	^Default 	^Description ^
|**device** 	|file path 	|yes 	|(none) 	|QMI device node, typically **/dev/cdc-wdm0**|
|**apn** 	|string 	|yes 	|(none) 	|Used APN |
|**pincode** 	|number 	|no 	|(none) 	|PIN code to unlock SIM card |
|**username** 	|string 	|no 	|(none) 	|Username for PAP/CHAP authentication |
|**password** 	|string 	|no 	|(none) 	|Password for PAP/CHAP authentication |
|**auth**   |string 	|no 	|(none) 	|Authentication type: **pap**, **chap**, **both**, **none** |
|**modes** 	|string 	|no 	|(modem default) 	|Allowed network modes, comma separated list of: **all**, **lte**, **umts**, **gsm**, **cdma**, **td-scdma** |
|**delay** 	|number 	|no 	|0 	|Seconds to wait before trying to interact with the modem (some ZTE modems require up to 30 s.) |
|**pdptype** 	|string 	|no 	|IP 	|Used IP-stack mode, IP (for IPv4), IPV6 (for IPv6) or IPV4V6 (for dual-stack) |
|**plmn** |number |no |(none) |first three digits are the **mcc** (mobile country code) and the last three digits are the **mnc** (mobile network code), for example if plmn=338020, then the mcc is 338 and the mnc is 020|

Here is a brief help about **uqmi** command line usage.
<code sh>
No device given
Usage: uqmi <options|actions>
Options:
  --single, -s:                     Print output as a single line (for scripts)
  --device=NAME, -d NAME:           Set device name to NAME (required)
  --keep-client-id <name>:          Keep Client ID for service <name>
  --release-client-id <name>:       Release Client ID after exiting

Services:                           dms, nas, pds, wds, wms

Actions:
  --get-versions:                   Get service versions
  --set-client-id <name>,<id>:      Set Client ID for service <name> to <id>
                                    (implies --keep-client-id)
  --get-client-id <name>:           Connect and get Client ID for service <name>
                                    (implies --keep-client-id)
  --start-network <apn>:            Start network connection (use with options below)
    --auth-type pap|chap|both|none: Use network authentication type
    --username <name>:              Use network username
    --password <password>:          Use network password
    --autoconnect:                  Enable automatic connect/reconnect
  --stop-network <pdh>:             Stop network connection (PDH should be 4294967295), (use with option below)
    --autoconnect:                  Disable automatic connect/reconnect
  --get-data-status:                Get current data access status
  --set-autoconnect <val>:          Get current data access status (disabled, enabled, paused)
  --get-pin-status:                 Get PIN verification status
  --verify-pin1 <pin>:              Verify PIN1
  --verify-pin2 <pin>:              Verify PIN2
  --set-pin1-protection <state>:    Set PIN1 protection state (disabled, enabled)
    --pin <pin>:                    PIN1 needed to change state
  --set-pin2-protection <state>:    Set PIN2 protection state (disabled, enabled)
    --pin <pin>:                    PIN1 needed to change state
  --change-pin1:                    Change PIN1
    --pin <old pin>:                Current PIN1
    --new-pin <new pin>:            New pin
  --change-pin2:                    Change PIN2
    --pin <old pin>:                Current PIN2
    --new-pin <new pin>:            New pin
  --unblock-pin1:                   Unblock PIN1
    --puk <puk>:                    PUK needed to unblock
    --new-pin <new pin>:            New pin
  --unblock-pin2:                   Unblock PIN2
    --puk <puk>:                    PUK needed to unblock
    --new-pin <new pin>:            New pin
  --get-imsi:                       Get International Mobile Subscriber ID
  --reset-dms:                      Reset the DMS service
  --set-device-operating-mode <m>   Set the device operating mode
                                    (modes: online, low_power, factory_test, offline
                                     reset, shutting_down, persistent_low_power,
                                     mode_only_low_power)
  --set-network-modes <modes>:      Set usable network modes (Syntax: <mode1>[,<mode2>,...])
                                    Available modes: all, lte, umts, gsm, cdma, td-scdma
  --set-network-preference <mode>:  Set preferred network mode to <mode>
                                    Available modes: auto, gsm, wcdma
  --set-network-roaming <mode>:     Set roaming preference:
                                    Available modes: any, off, only
  --network-scan:                   Initiate network scan
  --network-register:               Initiate network register
  --get-signal-info:                Get signal strength info
  --get-serving-system:             Get serving system info
  --list-messages:                  List SMS messages
  --get-message <id>:               Get SMS message at index <id>
  --get-raw-message <id>:           Get SMS raw message contents at index <id>
  --send-message <data>:            Send SMS message (use options below)
    --send-message-smsc <nr>:       SMSC number (required)
    --send-message-target <nr>:     Destination number (required)
    --send-message-flash:           Send as Flash SMS
</code>

==== MBIM Protocol configuration ====
Currently, there is not enough information about mbim protocol as it's being actively developed. If you are curious about setting up mbim protocol, you may ask [[https://lists.openwrt.org/cgi-bin/mailman/listinfo | OpenWrt users/devel mailing lists]] or [[https://forum.openwrt.org | OpenWrt forum]]

Here is a brief help about **umbim** command line.
<code sh>
umbim help
Usage: mbim <caps|pinstate|unlock|connect|disconnect> [options]
Options:
    -d <device>         the device (/dev/cdc-wdmX)
    -t <transaction>    the transaction id
    -n                  no close
    -v                  verbose
</code>

==== Interface configuration =====
First check that everything works correctly:
<code>
root@OpenWrt:~# uqmi -d /dev/cdc-wdm0 --get-data-status
"disconnected"
</code>
and
<code>
root@OpenWrt:~# uqmi -d /dev/cdc-wdm0 --get-signal-info
{
        "type": "lte",
        "rssi": -71,
        "rsrq": -9,
        "rsrp": -94,
        "snr": 70
}
</code>
To start the internet connection - issue a command:
<code>
uqmi -d /dev/cdc-wdm0 --start-network internet --autoconnect
</code>
Where "internet" is the APN of your provider.

:!: Many providers allow to use "any" APN, so-called "no-settings" connection. So, in many cases "internet" would be just fine

Check the status:
<code>
uqmi -d /dev/cdc-wdm0 --get-data-status
"connected"
</code>

**--autoconnect** key says that you want always be connected, once dongle is inserted to the router and Cellular Network is in range.
:!: It will be kept after reboot.

In case you need additional authentication, please look at the possible arguments for the uqmi utility:
<code>
  --start-network <apn>:            Start network connection (use with options below)
    --auth-type pap|chap|both|none: Use network authentication type
    --username <name>:              Use network username
    --password <password>:          Use network password
    --autoconnect:                  Enable automatic connect/reconnect
  --stop-network <pdh>:             Stop network connection (use with option below)
    --autoconnect:                  Disable automatic connect/reconnect
</code>

==== Network configuration =====
Now you should add new **Interface** to /etc/config/network
<code>
config interface 'wwan'
        option ifname 'wwan0'
        option proto 'dhcp'
</code>
You can do this using the vi text editor, but if you're not comfortable with that, point your browser to 192.168.1.1 again, choose Network -> Interfaces and click Add new interface.

Write **wwan** as the name of the interface and make it cover the **wwan0** interface. Choose **DHCP client** as the protocol.

FIXME Insert a screenshot of LUCI add Interface. I have not enought rights.

==== Firewall configuration =====
The only thing that is left - Add **wwan** interface to **WAN zone**

Using LUCI:
  * go to Network -> Firewall, scroll down to wan and click the Edit button
  * add a checkmark to the **wwan** box under Covered networks heading, click **Save & Apply**

:-D That's It! 8-)

FIXME Insert a Screen Shot from LUCI.

==== Checking your balance =====
To check your balance or send any other AT commands, you need to have usb serial device like: /dev/ttyUSB0

If you have it (if not then install missing usb serial drivers), you can run in first terminal:
<code>
cat /dev/ttyUSB0
</code>
and in the second (*101# is my ussd code):
<code>
echo -ne 'AT+CUSD=1,"*101#",15\r\n' > /dev/ttyUSB0
</code>
You should see in first terminal USSD response.

==== Additional Info =====
Some providers of the cellular internet use redirection to their pages for access activation, when you are connected first time.
I.e. **YOTA** in Russia.

Normally this would be blocked by **dnsmasq**:
<code>
Jan 18 14:36:49 OpenWrt daemon.warn dnsmasq[1325]: possible DNS-rebind attack detected: my.yota.ru
</code>

You have 2 options:
  * Allow rebind responses RFC1918 (In LUCI goto **Network** -> **DHCP and DNS** and uncheck **Rebind protection** checkmark)
  * Add Yota.ru domain to **Whitelist** (In LUCI goto **Network** -> **DHCP and DNS** and type in "yota.ru" without quotes to the **Domain whitelist** field.
**Save & apply**

===== Notes =====
 Based on: [[http://intelnuc.blogspot.ru/2014/10/turn-your-old-wireless-router-into-lte.html| This Article]]

==== Troubleshooting ====
__**Everything is okay but modem doesn't establish connection. What can I try?**__

You may want to try adding the argument //--get-client-id wds// and //--set-client-id// when running //uqmi// like:
<code>
wds=`uqmi -s -d /dev/cdc-wdm0 --get-client-id wds`
uqmi -d /dev/cdc-wdm0 --set-client-id wds,"$wds" --start-network your_apn
</code>

Moreover based on this [[http://tiebing.blogspot.com/2015/03/linux-running-4g-lte-modem.html|article]] I discovered that need to reset my modem (tested on Dell Wireless 5804 413c:819b) in boot process, so you can try add the following commands in your /etc/rc.local:
<code>
/sbin/uqmi -d /dev/cdc-wdm0 --set-device-operating-mode offline
/sbin/uqmi -d /dev/cdc-wdm0 --set-device-operating-mode reset
/bin/sleep 20
/sbin/uqmi -d /dev/cdc-wdm0 --set-device-operating-mode online
/sbin/uqmi -d /dev/cdc-wdm0 --set-autoconnect enabled
/sbin/uqmi -d /dev/cdc-wdm0 --network-register
</code>

__**My router is not detecting the dongle. What should I do?**__

Try the following commands:
<code>
usbmode -l
</code>
It should respond with a message about your USB device is detected. If it does, issue the next command. If it doesn't, you might want to get help from the forum.
<code>
usbmode -s
</code>
Then wait for the dongle to get issued an IP from your ISP.

__**I have to issue //usbmode -l// and //usbmode -s// every time I reboot my router to detect my USB device. How can I automate it?**__

Include the following codes into ///etc/rc.local// just before //exit 0//:
<code>
/sbin/usbmode -l
/bin/sleep 2
/sbin/usbmode -s
</code>