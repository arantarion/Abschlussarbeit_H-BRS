====== 802.11s based wireless mesh network ======

[[wp>IEEE 802.11s|802.11s]] is an open-source standard for connecting wireless devices without having to set up infrastructure. It operates on [[wp>Data_link_layer|Layer 2]] and makes sure that all nodes can see each other on a bridged Layer 2 network (as if they were all plugged into a switch). Any [[wp>Network_layer|Layer 3]] infrastructure will work on top of this. An IP router and DHCP clients will work well. More sophisticated infrastructure can be implemented depending upon the use case. (eg Batman, Bird, OLSR etc.)

===== Status =====

802.11s works reliably with OpenWrt 19.07 and later, including authentication and encryption, assuming that there is hardware/driver support and that ''wpad-mesh-openssl'' (or equivalent) has been installed.

===== Config =====

It is necessary to remove wpad, depending which one is installed by default:

<code>
# opkg remove wpad-mini
# opkg remove wpad-basic
</code>



Install dependencies (''wpad-mesh-openssl'' instead):

<code>
# opkg install wpad-mesh-openssl
</code>

Edit ''/etc/config/wireless'' and make sure:
  * ''radio0'' is not disabled
  * ''radio0'' is configured to be compatible on each device (same channel, etc)
  * add an ''iface'' entry along these lines:

<code>
config wifi-iface 'mesh'
        option network 'mesh'
        option device 'radio0'
        option mode 'mesh'
        option mesh_id 'your-mesh-name' # anything, this connects the nodes into one mesh (plus the password if there's any)
        option encryption 'psk2/aes' # or 'none'
        option key 'your-secret-password'
</code>

**Note:** Access by client devices is achieved by bridging the 'ap' and the 'mesh' interfaces.

For a complete list of mesh parameters you can inspect the values of the following variables in [[https://github.com/openwrt/openwrt/blob/master/package/kernel/mac80211/files/lib/netifd/wireless/mac80211.sh|mac80211.sh Source]]:
  * MP_CONFIG_INT
  * MP_CONFIG_BOOL
  * MP_CONFIG_STRING

Alternatively, you can issue the command
<code>
# iw dev <devname> get mesh_param 
</code>
to obtain a list of available mesh parameters, but without documentation.

Then reinitialize wifi and see if it worked:

<code>
# wifi
# logread -l 20 -f
# iw dev wlan0 station dump
</code>

===== Wireless Hardware Support =====

:!: Support for 802.11s (type mesh) depends on wireless driver. Most up to date open source drivers work.

Use the following to determine if your hardware supports 802.11s mesh.
<code>iw list | grep "Supported interface modes" -A 9

...
      Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * WDS
                 * monitor
                 * mesh point
                 * P2P-client
		 * P2P-GO
...</code>


Example: ath9k in router
<code>iw list
...
valid interface combinations:
		 * #{ managed, WDS } <= 2048, #{ AP, mesh point } <= 8, #{ P2P-client, P2P-GO } <= 1, #{ IBSS } <= 1,
		   total <= 2048, #channels <= 1, STA/AP BI must match
		 * #{ IBSS, AP, mesh point } <= 1,
		   total <= 1, #channels <= 1, STA/AP BI must match, radar detect widths: { 20 MHz (no HT), 20 MHz }
...</code>

Example: ath9k_htc USB Stick
<code>iw list
...
valid interface combinations:
		 * #{ managed, P2P-client } <= 2, #{ AP, mesh point, P2P-GO } <= 2,
		   total <= 2, #channels <= 1
...</code>

===== Using the command line CLI =====

iw is a new nl80211 based CLI configuration utility for wireless devices.[[http://wireless.kernel.org/en/users/Documentation/iw#About_iw|more...]]

Create a new interface "mesh0"
<code>iw phy phy0 interface add mesh0 type mp mesh_id mymesh</code>

Confirm that the new interface exists
<code>ifconfig -a | grep mesh0

     mesh0      Link encap:Ethernet  HWaddr 00:18:39:14:48:B5</code>

Bring up your mesh0 interface
<code>ifconfig mesh0 up</code>

Assign the interface an IP address. ie: 10.0.0.x
<code>ifconfig mesh0 10.0.0.1</code>

By default, mesh points will use channel 1 and automatically attempt to create peer links with mesh nodes with the same mesh ID and channel.

===== Verify =====

Use the iw command to display peer links or a table of reachable nodes in your mesh
<code>
iw dev $MESH_IFACE station dump
iw dev $MESH_IFACE mpath dump
</code>

Example:
<code>iw dev $MESH_IFACE station dump
    Station 00:15:6d:84:14:10 (on mesh)
         inactive time:  1320 ms
         rx bytes:   352
         rx packets: 4
         tx bytes:   174
         tx packets: 2
         signal:     -61 dBm
         tx bitrate: 1.0 MBit/s
         mesh llid:  32577
         mesh plid:  15969
         mesh plink: ESTAB
    Station 00:15:6d:84:14:09 (on mesh)
         inactive time:  3370 ms
         rx bytes:   1064
         rx packets: 12
         tx bytes:   545
         tx packets: 7
         signal:     -53 dBm
         tx bitrate: 1.0 MBit/s
         mesh llid:  41036
         mesh plid:  24435
         mesh plink: ESTAB
</code>

===== Block single peer from meshing =====
//This may require the iw-full package!//
Block a peer from meshing using its MAC address
<code>
iw dev $MESH_IFACE station set $MAC_TO_BLOCK plink_action block
</code>
Verify using section above (iw dev $MESH_IFACE station dump)
<code>
	mesh plink:	BLOCKED
</code>
Unblock:
<code>
iw dev $MESH_IFACE station set $MAC_TO_UNBLOCK plink_action open
</code>

according to [[https://github.com/freifunk-berlin/firmware/issues/726#issuecomment-569065569|this source]] plink_action is not persisted across reconnects of mesh links.
===== More background =====
  * [[http://www.cwnp.com/wp-content/uploads/pdf/802.11s_mesh_networking_v1.0.pdf|good background article]] from CWNP
  * [[https://wireless.wiki.kernel.org/en/developers/Documentation/ieee80211/802.11s]]
  * [[http://lists.open80211s.org|Open80211s Mailing List]]