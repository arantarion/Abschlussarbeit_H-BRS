====== OpenVPN extras ======
{{section>meta:infobox:howto_links#cli_skills&noheader&nofooter&noeditbutton}}

===== Introduction =====
  * This how-to describes the most common [[wp>OpenVPN|OpenVPN]] tuning scenarios adapted for OpenWrt.
  * Follow [[docs:guide-user:services:vpn:openvpn:server|OpenVPN server]] for server setup and [[docs:guide-user:services:vpn:openvpn:client|OpenVPN client]] for client setup.
  * Follow [[docs:guide-user:network:tunneling_interface_protocols#vpn_interfaces|VPN interfaces]] to define VPN interface using UCI.
  * Follow [[docs:guide-user:services:rng|Random generator]] to overcome low entropy issues.

===== Extras =====
==== References ====
  * [[https://openvpn.net/community-downloads/|OpenVPN for BSD/Linux/Windows]]
  * [[https://github.com/schwabe/ics-openvpn#openvpn-for-android|OpenVPN for Android]]
  * [[https://community.openvpn.net/|OpenVPN documentation]]

==== Web interface ====
Install the necessary packages and provide [[docs:guide-user:services:vpn:openvpn:extras#instance_management|instance management]] if you want to manage VPN instances using web interface.

<code bash>
# Install packages
opkg update
opkg install luci-app-openvpn
</code>

Navigate to **[[http://openwrt.lan/|LuCI]] -> Services -> OpenVPN** to manage OpenVPN instances.

==== Instance management ====
If you need to manage multiple VPN instances or use web interface.
Make sure to specify different VPN interface names for each instance.

<code bash>
# Provide VPN instance management
ls /etc/openvpn/*.conf \
| while read -r OVPN_CONF
do
OVPN_ID="$(basename ${OVPN_CONF%.*} | sed -e "s/\W/_/g")"
uci -q delete openvpn.${OVPN_ID}
uci set openvpn.${OVPN_ID}="openvpn"
uci set openvpn.${OVPN_ID}.enabled="1"
uci set openvpn.${OVPN_ID}.config="${OVPN_CONF}"
done
uci commit openvpn
/etc/init.d/openvpn restart
</code>

==== Commercial provider ====
If you use a commercial VPN provider.
Set up credentials for username/password authentication and enforce gateway redirection.

<code bash>
# Configuration parameters
OVPN_DIR="/etc/openvpn"
OVPN_ID="client"

# Save username/password credentials
umask go=
cat << "EOF" > ${OVPN_DIR}/${OVPN_ID}.auth
OVPN_USERNAME
OVPN_PASSWORD
EOF

# Configure VPN service
sed -i -e "
/^auth-user-pass/s/^/#/
\$a auth-user-pass ${OVPN_ID}.auth
/^redirect-gateway/s/^/#/
\$a redirect-gateway def1 ipv6
" ${OVPN_DIR}/${OVPN_ID}.conf
/etc/init.d/openvpn restart
</code>

==== Key management ====
Use [[https://github.com/OpenVPN/easy-rsa#overview|EasyRSA]] to add clients or revoke their certificates via CRL.

<code bash>
# Configuration parameters
OVPN_PKI="/etc/easy-rsa/pki"
export EASYRSA_PKI="${OVPN_PKI}"
export EASYRSA_BATCH="1"

# Add one more client
easyrsa build-client-full client1 nopass

# Add another client encrypting its private key
easyrsa build-client-full client2

# Revoke client certificate
easyrsa revoke client

# Generate a CRL
easyrsa gen-crl

# Enable CRL verification
OVPN_CRL="$(cat ${OVPN_PKI}/crl.pem)"
sed -i -e "
/^<crl-verify>/,/^<\/crl-verify>/s/^/#/
\$a <crl-verify>\n${OVPN_CRL//$'\n'/\\n}\n</crl-verify>
" /etc/openvpn/server.conf
/etc/init.d/openvpn restart
</code>

==== Static addresses ====
Provide static IP address allocation on VPN server assuming that:
  * ''192.168.8.0/24'' - VPN network
  * ''fdf1:e8a1:8d3f:8::/64'' - VPN6 network

<code bash>
umask go=rx
mkdir -p /etc/openvpn/ccd
cat << EOF > /etc/openvpn/ccd/client
ifconfig-push 192.168.8.2 255.255.255.0
ifconfig-ipv6-push fdf1:e8a1:8d3f:8::2/64
EOF
cat << EOF >> /etc/openvpn/server.conf
client-config-dir ccd
EOF
/etc/init.d/openvpn restart
</code>

==== Site-to-site ====
Implement plain routing between server side LAN and client side LAN assuming that:
  * ''192.168.1.0/24'' - server side LAN
  * ''192.168.2.0/24'' - client side LAN

Set up [[docs:guide-user:services:vpn:openvpn:extras#static_addresses|static address]] allocation on VPN server, add route to client side LAN, push route to server side LAN, selectively disable gateway redirection.

<code bash>
cat << EOF >> /etc/openvpn/ccd/client
iroute 192.168.2.0 255.255.255.0
push-remove redirect-gateway
EOF
cat << EOF >> /etc/openvpn/server.conf
route 192.168.2.0 255.255.255.0 192.168.8.2
push "route 192.168.1.0 255.255.255.0"
EOF
/etc/init.d/openvpn restart
</code>

Consider VPN network as private and assign VPN interface to LAN zone on VPN client.

<code bash>
uci del_list firewall.wan.device="tun+"
uci add_list firewall.lan.device="tun+"
uci commit firewall
/etc/init.d/firewall restart
</code>

==== Disable gateway redirection ====
If you do not need to push all traffic via VPN gateway.
Disable gateway redirection on VPN server.

<code bash>
sed -i -e "
/^push.*redirect-gateway/s/^/#/
" /etc/openvpn/server.conf
/etc/init.d/openvpn restart
</code>

Or ignore it on VPN client.

<code bash>
sed -i -e "
/^redirect-gateway/s/^/#/
\$a pull-filter ignore redirect-gateway
" /etc/openvpn/client.conf
/etc/init.d/openvpn restart
</code>

==== Split gateway ====
If VPN gateway is not your LAN gateway.
Implement plain routing between LAN network and VPN network assuming that:
  * ''192.168.1.0/24'' - LAN network
  * ''192.168.1.2/24'' - VPN gateway
  * ''192.168.8.0/24'' - VPN network

Add port forwarding for VPN server on LAN gateway.

<code bash>
uci -q delete firewall.ovpn
uci set firewall.ovpn="redirect"
uci set firewall.ovpn.name="Redirect-OpenVPN"
uci set firewall.ovpn.src="wan"
uci set firewall.ovpn.src_dport="1194"
uci set firewall.ovpn.dest="lan"
uci set firewall.ovpn.dest_ip="192.168.1.2"
uci set firewall.ovpn.family="ipv4"
uci set firewall.ovpn.proto="udp"
uci set firewall.ovpn.target="DNAT"
uci commit firewall
/etc/init.d/firewall restart
</code>

Add route to VPN network via VPN gateway on LAN gateway.

<code bash>
uci -q delete network.vpn
uci set network.vpn="route"
uci set network.vpn.interface="lan"
uci set network.vpn.target="192.168.8.0/24"
uci set network.vpn.gateway="192.168.1.2"
uci commit network
/etc/init.d/network restart
</code>

==== IPv6 gateway ====
Provide IPv6 tunnel connectivity.
Set up [[docs:guide-user:network:ipv6_ipv4_transitioning|transitional]] connectivity or [[docs:guide-user:network:ipv6:ipv6.nat6#simplified|NAT6]] with IPv6 masquerading if required.

Enable VPN6 network on VPN server, provide DNS6, redirect GW6.
Provide default IPv6 route for VPN clients.

<code bash>
OVPN_POOL6="fdf1:e8a1:8d3f:8::/64"
OVPN_DNS6="${OVPN_POOL6%/*}1"
cat << EOF >> /etc/openvpn/server.conf
proto udp6
server-ipv6 ${OVPN_POOL6}
push "dhcp-option DNS ${OVPN_DNS6}"
push "redirect-gateway ipv6"
EOF
/etc/init.d/openvpn restart
uci set network.wan6.sourcefilter="0"
uci commit network
/etc/init.d/network restart
</code>

==== TCP ====
Use [[https://openvpn.net/faq/why-does-openvpn-use-udp-and-tcp/|TCP]] for troubleshooting.

<code bash>
OVPN_PROTO="tcp"
sed -i -e "
/^proto/s/^/#/
\$a proto ${OVPN_PROTO}
" /etc/openvpn/server.conf
/etc/init.d/openvpn restart
uci set firewall.ovpn.proto="${OVPN_PROTO}"
uci commit firewall
/etc/init.d/firewall restart
</code>

==== Bridging ====
If you need to utilize [[https://openvpn.net/community-resources/ethernet-bridging/|bridging]].
Beware of compatibility issues.

<code bash>
OVPN_ADDR="$(uci get network.lan.ipaddr)"
OVPN_MASK="$(uci get network.lan.netmask)"
OVPN_POOL="${OVPN_ADDR%.*}.128 ${OVPN_ADDR%.*}.254"
OVPN_DNS="${OVPN_ADDR}"
NET_IF="$(uci get network.lan.ifname)"
sed -i -e "
/^dev/s/^/#/
\$a dev tap
/^server/s/^/#/
\$a server-bridge ${OVPN_ADDR} ${OVPN_MASK} ${OVPN_POOL}
/^push.*dhcp-option.*DNS/s/^/#/
\$a push \"dhcp-option DNS ${OVPN_DNS}\"
" /etc/openvpn/server.conf
sed -i -e "
/^dev/s/^/#/
\$a dev tap
" /etc/openvpn/client.ovpn
/etc/init.d/openvpn restart
uci -q delete firewall.lan.device
uci commit firewall
/etc/init.d/firewall restart
uci set network.lan.type="bridge"
uci set network.lan.ifname="${NET_IF%% *} tap0"
uci commit network
/etc/init.d/network restart
</code>

==== Compression ====
Enable lz4 compression.
Beware of compatibility and [[https://community.openvpn.net/openvpn/wiki/VORACLE|security]] issues.

<code bash>
cat << EOF >> /etc/openvpn/server.conf
compress lz4
push "compress lz4"
EOF
/etc/init.d/openvpn restart
</code>

==== Compatibility ====
If using OpenVPN 2.3 or older, replace ''tls-crypt'' with ''tls-auth''.

<code bash>
sed -i -e "
/^<.*tls-crypt>/s/crypt/auth/
\$a key-direction 0
" /etc/openvpn/server.conf
/etc/init.d/openvpn restart

sed -i -e "
/^<.*tls-crypt>/s/crypt/auth/
\$a key-direction 1
" /etc/openvpn/client.conf
/etc/init.d/openvpn restart
</code>

==== Verbose logging ====
Increase log verbosity for troubleshooting.

<code bash>
sed -i -e "
/^verb/s/^/#/
\$a verb 5
" /etc/openvpn/*.conf
/etc/init.d/openvpn restart
</code>

==== Dual-stack Windows client ====
Fix IPv6 routing for Windows desktop client when using dual-stack mode.

<code bash>
NETSH_IPV6="C:\\\\Windows\\\\System32\\\\cmd.exe /c netsh interface ipv6"
cat << EOF >> /etc/openvpn/client.ovpn
script-security 2
up '${NETSH_IPV6} set privacy state=disabled store=active & echo'
ipchange '${NETSH_IPV6} set global randomizeidentifiers=disabled store=active & echo'
route-up '${NETSH_IPV6} delete route prefix=%ifconfig_ipv6_local%/%ifconfig_ipv6_netbits% interface=%dev_idx% store=active'
EOF
</code>

==== DNS over VPN ====
{{section>docs:guide-user:services:vpn:wireguard:extras#dns_over_vpn&noheader&nofooter&noeditbutton}}

Modify the VPN client profile for Windows desktop client.

<code bash>
cat << EOF >> /etc/openvpn/client.ovpn
block-outside-dns
EOF
</code>

==== DNS and domain ====
Use DNS and domain provided by VPN server on OpenWrt client.

<code bash>
cat << "EOF" > /etc/openvpn/client.sh
#!/bin/sh
env | sed -n -e "
/^foreign_option_.*=dhcp-option.*DNS/s//nameserver/p
/^foreign_option_.*=dhcp-option.*DOMAIN/s//search/p
" | sort -u > /tmp/resolv.conf.vpn
case ${script_type} in
(up) uci set dhcp.@dnsmasq[0].resolvfile="/tmp/resolv.conf.vpn" ;;
(down) uci revert dhcp ;;
esac
/etc/init.d/dnsmasq restart &
EOF
chmod +x /etc/openvpn/client.sh

sed -i -e "
/^script-security/s/^/#/
\$a script-security 2
/^up/s/^/#/
\$a up /etc/openvpn/client.sh
/^down/s/^/#/
\$a down /etc/openvpn/client.sh
" /etc/openvpn/client.conf
/etc/init.d/openvpn restart
</code>

==== Kill switch ====
Prevent traffic leak on OpenWrt client isolating VPN interface in a separate firewall zone.

<code bash>
uci rename firewall.@forwarding[0]="lan_wan"
uci set firewall.lan_wan.enabled="0"
uci -q delete firewall.vpn
uci set firewall.vpn="zone"
uci set firewall.vpn.name="vpn"
uci set firewall.vpn.input="REJECT"
uci set firewall.vpn.output="ACCEPT"
uci set firewall.vpn.forward="REJECT"
uci set firewall.vpn.masq="1"
uci set firewall.vpn.mtu_fix="1"
uci add_list firewall.vpn.device="tun+"
uci del_list firewall.wan.device="tun+"
uci -q delete firewall.lan_vpn
uci set firewall.lan_vpn="forwarding"
uci set firewall.lan_vpn.src="lan"
uci set firewall.lan_vpn.dest="vpn"
uci commit firewall
/etc/init.d/firewall restart

cat << "EOF" > /etc/openvpn/killswitch.sh
#!/bin/sh
if pgrep openvpn
then
uci set firewall.lan_wan.enabled="1"
/etc/init.d/openvpn stop &
else
uci revert firewall
/etc/init.d/openvpn start &
fi
/etc/init.d/firewall restart &
EOF
chmod +x /etc/openvpn/killswitch.sh
</code>
