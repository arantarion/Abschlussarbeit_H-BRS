====== Overriding Build Options ======

Some packages might require overriding certain build options because we are cross compiling.

===== Autotools: Autoconf =====

**CONFIGURE_VARS**

  - Override ac_cv_* variables that are normally set during autoconf ./configure phase.
  - override pkgconfig configure vars

Example: 
Some packages check for features (header files) and do not offer -enable/-with or -disable/-without configure options (to be written into _ARGS). Search for the configure variable in config.log and preset it in CONFIGURE_VARS.

        CONFIGURE_VARS += \
                ac_cv_header_regex_h=no



**CONFIGURE_ARGS**

  - Add options/test after ./configure

:!: Looking into config.log can help

===== Compiler flags =====

Available compiler flags are handled in rules.mk

<code>
TARGET_CFLAGS:=$(TARGET_OPTIMIZATION)$(if $(CONFIG_DEBUG), -g3) $(EXTRA_OPTIMIZATION)
TARGET_CXXFLAGS = $(TARGET_CFLAGS)
TARGET_ASFLAGS_DEFAULT = $(TARGET_CFLAGS)
TARGET_ASFLAGS = $(TARGET_ASFLAGS_DEFAULT)
TARGET_CPPFLAGS:=-I$(STAGING_DIR)/usr/include -I$(STAGING_DIR)/include
TARGET_LDFLAGS:=-L$(STAGING_DIR)/usr/lib -L$(STAGING_DIR)/lib
</code>

Typically you should only add additional options to compile flags.
<code>TARGET_CFLAGS+= -Wall</code>

Example: Support multiple library versions via .../usr/lib/libname-v1/ or .../usr/lib/libname-v2/ and select them.

:!: BUG CXXFLAGS can contain wrong options because GCC/G++ accept different ones.

===== Make =====

MAKE_VARS
in include/package-defaults.mk
<code>
MAKE_VARS = \
        CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS) $(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)" \
        CXXFLAGS="$(TARGET_CXXFLAGS) $(EXTRA_CXXFLAGS) $(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)" \
        LDFLAGS="$(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)"
</code>

MAKE_FLAGS

<code>
MAKE_FLAGS = \
        $(TARGET_CONFIGURE_OPTS) \
        CROSS="$(TARGET_CROSS)" \
        ARCH="$(ARCH)"
</code>

===== CMake =====

include/cmake.mk

CMAKE_OPTIONS

CMAKE_HOST_OPTIONS
===== Scons =====

SCONS_VARS are set in include/scons.mk

<code>
SCONS_VARS = \
        CC="$(TARGET_CC_NOCACHE)" \
        CXX="$(TARGET_CXX_NOCACHE)" \
        CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
        CXXFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
        CPPFLAGS="$(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)" \
        LDFLAGS="$(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)" \
        DESTDIR="$(PKG_INSTALL_DIR)"
</code>

SCONS_OPTIONS have no default set.

scons is only used by a few packages: [[https://github.com/openwrt/packages/blob/master/net/iotivity/Makefile|iotivity]] smartsnmpd