====== Wireless Access Point / Dumb Access Point / Dumb AP ======

<WRAP box>
<color #ed1c24>**Note**</color> <color #ff7f27>The term "Dumb Access Point" appears to have originated in the Raspberry Pi world. From the perspective of a generic network engineer, the correct term would be "Wireless Access Point". To quote linksys.com - "An access point connects to a wired router, switch, or hub via an Ethernet cable [or some other means], and projects a Wi-Fi signal to a designated area". A router with a wireless interface would be called a "Wireless Router".</color>

**Summary:** This document describes how to create a Dumb Access Point (Dumb AP) 
that extends a network that already has a "main router".
It's called a "Dumb Access Point" because it does not provide routing or DHCP.
Here are the basics of setting up any router (not just OpenWrt) to be a Dumb AP:

  * Connect the Dumb AP **LAN** port to the main router's **LAN** port via Ethernet. (Yes - **LAN-to-LAN** - the WAN port of the Dumb AP will not be used.)
  * Configure the Dumb AP's **LAN** port to have a static address on the main router's LAN address range. For example, if the main router LAN is 192.168.1.1, set the Dumb AP's LAN port to be 192.168.1.2
  * Set the DNS server and gateway to the main router's address (192.168.1.1 in this example)
  * Turn off the firewall and DHCP&DNS server (dnsmasq) in the Dumb AP. 
  * Configure the wireless SSID, password, etc. on the Dumb AP as desired
  * Reboot the Dumb AP

The result is a bridged LAN (no internal subnets) that will work fine for home and small networks. 
People can connect to the Dumb AP over Ethernet or Wi-Fi (using the configured SSID/password) and use to the existing network. 
</WRAP>

===== Configuration via OpenWrt Web Interface LUCI =====

Of course you can achieve this with using the web interface:\\
Once you have configured your wireless network with LUCI you can start configuring your dumb AP.\\
  - Disconnect the (soon-to-be) Dumb AP from your network, and connect your computer to it with an Ethernet cable. \\
  - Use the web interface to go to Network -> Interfaces and select the LAN interface.\\
  - Enter an IP address "next to" your main router on the field "IPv4 address". (If your main router has IP 192.168.1.1, enter 192.168.1.2). Set DNS and gateway to point into your main router to enable internet access for the dumb AP itself \\
  - Then scroll down and select the checkbox "Ignore interface: Disable DHCP for this interface."\\
  - Click "IPv6 Settings" tab and set everything to "disabled".\\
  - In the top menu go to System -> Startup, and disable firewall, dnsmasq and odhcpd in the list of startup scripts.\\ 
  - Click the Save and Apply button. Hard-Restart your router if you're not able to connect anymore.\\
  - Go to http://192.168.1.2 (or whatever address you specified) and check if the settings for the LAN interface are the same.\\
  - Use an Ethernet to connect one of the LAN ports on your main router to one of the LAN/switch ports of your "new" dumb AP. (There's no need to connect the WAN port of the Dumb AP.)
  - You are done.\\


===== Configuration via OpenWrt command line tools =====

The changes below assume an OpenWrt default configuration, the relevant files are:

  * [[docs:guide-user:base-system:basic-networking|/etc/config/network]]
  * [[docs:guide-user:network:wifi:basic|/etc/config/wireless]]

==== Step 1: Modify the Network ====

Edit ''/etc/config/network'' and change the ''[[docs:guide-user:base-system:basic-networking#interfaces|interface]]'' section:

=== For switch-less devices, e.g. Alix Board, wr1043nd v2 ===

On switchless devices, simply bridge all ethernet interfaces together, remove the existing WAN interface - if any.

<code>
config interface lan
        option type     'bridge'
        option ifname   'eth0 eth1'   # Bridges lan and wan
        option proto    'dhcp'        # Change as appropriate
</code>

=== For devices with switch and dedicated WAN, e.g. WNDR3700, WR1043ND v1, WR741ND v2.4 ===

On devices with a separate WAN interface, bridge the LAN VLAN together with the WAN interface, remove the existing WAN interface - if any.

<code>
config interface lan
        option type     'bridge'
        option ifname   'eth0.1 eth1'  # Bridges vlan 1 and wan
        option proto    'dhcp'         # Change as appropriate
</code>

Switch configuration on WR1043ND (barrier breaker):

<code>
config switch_vlan
        option device 'switch0'
        option vlan '1'
        option ports '0 1 2 3 4 5t'  # 1. add 0 in here

#config switch_vlan               # 2. comment out or delete the whole vlan 2 section
#       option device 'switch0'
#       option vlan '2'
#       option ports '0 5t'
</code>

=== For devices with switch only, e.g. WRT54GL ===

On devices where WAN and LAN are separated by switch config, reconfigure the LAN VLAN to cover all ports,
remove the existing WAN interface and its related VLAN - if any.

<code>
config switch_vlan eth0_1
        option vlan     '1'
        option ports    '0 1 2 3 4 5t' # Might vary depending on the device

config interface lan
        option type     'bridge'
        option ifname   'eth0.1'      
        option proto    'dhcp'         # Change as appropriate
</code>

==== Step 2: Change the existing wireless network ====

Edit ''/etc/config/wireless'', and don't worry about most of it, things that might need changes are commented.

<code>
config 'wifi-device' 'radio0'
        option type    'mac80211'
        option channel '11'
        option macaddr '12:e4:4a:b3:83:1a'
        option htmode  'HT20'
        list ht_capab  'SHORT-GI-20'
        list ht_capab  'SHORT-GI-40'
        list ht_capab  'TX-STBC'
        list ht_capab  'RX-STBC1'
        list ht_capab  'DSSS_CCK-40'

config 'wifi-iface'
        option device  'radio0'
        option network 'lan'  # Set to the name of the bridged interface
        option mode    'ap'
        option ssid    'ap_myaccesspoint'
        option encryption 'psk2'  # Change as appropriate
        option key     'ap_password'
</code>

==== Step 3: Disable DHCP Server ====

If you still need dnsmasq running for something else (e.g. TFTP server) you can do:
<code>uci set dhcp.lan.ignore=1
uci commit dhcp
/etc/init.d/dnsmasq restart</code>

If not disable dnsmasq service:
<code>/etc/init.d/dnsmasq disable
/etc/init.d/dnsmasq stop</code>

==== Step 4: Disable DHCPv6 Server ====

Disable [[docs:techref:odhcpd|odhcpd]] with uci:
<code>uci set dhcp.lan.dhcpv6=disabled
uci set dhcp.lan.ra=disabled
uci commit
</code>

Or disable service:
<code>/etc/init.d/odhcpd disable
/etc/init.d/odhcpd stop</code>

==== Step 5: Disable Firewall ====

<code>/etc/init.d/firewall disable
/etc/init.d/firewall stop</code>

===== Apply changes =====

Reloading the network config should be enough, it should automatically restart if necessary.

<code>/etc/init.d/network reload</code>

===== IPv6 =====

If you would like your AP to receive IPv6 as a host only and not for routing you have to tell dhcp6c not to request prefix deligation.  If you do not do this the AP will reject basic IPv6 addresses.
If you want to still be able to use ipv6 on the Router itself change the wan6 to lan6 and @wan to @lan

<code>config interface 'lan6'
	option proto 'dhcpv6'
	option ifname '@lan'
	option reqprefix no</code>

===== Multicast Forwarding =====

DLNA and UPnP clients and printer or SMB discovery protocols on LANs tend to work by using multicast packets. For example PS3, xbox, TVs and stereos use DLNA to detect, communicate with and stream audio/video over the network. By default on bridged interfaces on OpenWrt (at least tested in 18.x series) multicast snooping is turned off. This means all network interfaces connected to a bridge (such as a WiFi SSID and ethernet VLAN) will receive multicast packets as if they were broadcast packets.

On WiFi the //slowest// modulation available is used for multicast packets (so that everyone can hear them). If you have "enabled legacy 802.11b rates" on your WiFi (Advanced settings checkbox in LuCI under the WiFi settings, or 	''option legacy_rates '1''' in /etc/config/wireless file) then 1Mbps is the rate that will be used. This can completely use up the WiFi airtime with even fairly light multicast streaming. 

There are two possible fixes for this, one is to //enable// multicast snooping: ''option igmp_snooping '1''' under the appropriate /etc/config/network settings for the bridge. This will cause the bridge to forward only on bridge ports that have requested to receive the particular multicast group. On the other hand, if someone on WiFi requests the group, it will still flood the multicast there, and some people have reported problems with certain devices such as android phones and with ipv6 when igmp_snooping is enabled (requires further debugging to identify if there is really a problem or not). By //disabling// legacy 802.11b rates (''option legacy_rates '0''') you can at least force the use of 6Mbps or more on the WiFi multicast packets, and this opens up more airtime for other uses. 

==== Notes: ====

  * //The Dumb AP wireless can be configured to control access as Open/WPA/WPA2/etc. MAC-based access control is controlled by the main router.//
  * //'Static DHCP' is not covered here: this procedure creates an AP that provides wired/wireless access and won't interfere with Static DHCP.//
  * //This recipe is similar to the "Bridged AP" recipe at [[docs:guide-user:network:wifi:BridgedAP|Bridged AP]]. These pages should probably be merged.//
  * //Firewall bridge mode support in OpenWrt is provided by the [[packages:pkgdata:kmod-br-netfilter|kmod-br-netfilter]] module.//
